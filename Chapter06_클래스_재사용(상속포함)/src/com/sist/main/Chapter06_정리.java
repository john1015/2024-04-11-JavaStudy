package com.sist.main;
/*
 * 객체 지향 프로그램
 * --------------
 * 	1) 데이터 보호 => 캡슐화
 * 		데이터 은닉화 / 메소드를 통해 접근이 가능
 * 		private		 getter/setter
 * 	2) 상속 => 기존의 클래스를 재사용
 * 		상속 / 포함
 * 			   | 있는 그대로 사용 => 사용빈도가 많다
 * 		| 변경해서 사용
 * 		  = 메모리 누수 현상
 * 			상위 클래스 메모리 할당 => 하위 클래스 메모리 할당 : 메모리 사용이 많다
 * 			상위 클래스에 맞게 사용 => 제약이 많다
 * 			결합성이 높아지는 단점
 * 			속도가 늦다 ==> 가급적이면 상속을 사용하지 않는다
 * 			----------------- 수정시에 다른 클래스에 영향을 많이 미친다
 * 		=> 윈도우 프로그램 : 상속
 * 		=> 웹 프로그램 : 상속이 거의 없다 => Spring => POJO
 * 	3) 다형성(오버로딩 , 오버라이딩)
 * 					  -------
 * 					  모든 내용이 동일(리턴형,매개변수,메소드명,접근지정어)
 * 			 | 메소드명만 동일
 * 	  ----- 여러형태 (같은 메소드명으로 다른 기능을 제작)
 * 		=> 새로운 기능 추가
 * 		=> 기존의 기능 변경
 * 		=> 오버로딩 / 오버라이딩 => 질문
 * 			new     modify
 * ---------------------------- 객체 지향의 3대 특성 (권장) => 재사용 , 수정 , 추가 => 유지보수
 * 
 * 	1. 클래스 구성요소
 * 	   클래스 : 설계
 * 				= 필요한 데이터 추출 => 변수
 * 				= 기능 추출 => 메소드
 * 				= 필요시에는 초기화 => 생성자 (생략이 가능)
 * 		|
 * 	  메모리에 저장 => 인스턴스 => new
 * 		|
 * 	  사용 => 객체 => new로부터 생성
 * 			----
 * 			 관련된 데이터와 메소드를 관리하는 메모리 영역(변수 => 데이터값을 관리)
 * 			------------------------------------
 * 			define은 중요하지 않는다
 * 			=> 권위가 있는 사람이 이름 부여
 */
public class Chapter06_정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
